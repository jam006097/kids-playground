name: CI/CD Pipeline # ワークフローの名前

on:
  push:
    branches:
      - main # mainブランチへのプッシュでトリガー

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 実行環境
    environment: production # 環境名を指定 (GitHub Secretsと連携)

    permissions: # GITHUB_TOKENの権限を設定
      contents: write # リポジトリへの書き込み権限 (GHCRプッシュに必要)
      packages: write # GHCRへの書き込み権限 (これがないとプッシュできません！)

    services: # テスト用PostgreSQLサービス
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER_TEST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_TEST }}
          POSTGRES_DB: test_db # テスト用DB名
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
    - name: Checkout code # コードをチェックアウト
      uses: actions/checkout@v4

    - name: Set up Python # Python環境をセットアップ
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # DockerfileのPythonバージョンと合わせると良い

    - name: Install Python dependencies # Pythonの依存ライブラリをインストール
      run: |
        python -m pip install --upgrade pip
        pip cache purge # キャッシュをクリアして、確実にインストール
        pip install -r requirements.txt
        pip install pip-audit

    - name: Run pip-audit # Pythonの脆弱性監査を実行
      run: |
        pip-audit --ignore-vuln GHSA-4xh5-x5gv-qwph

    - name: Run Python tests # Pythonのテストを実行
      env: # テスト用の環境変数を設定
        DATABASE_URL: "postgres://kina:Kaim2308!@127.0.0.1:5432/test_db" # テスト用DBの接続情報
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }} # GitHub Secretsから秘密の鍵を渡す
      run: |
        pytest --ds=mysite.settings.dev

    - name: Run Django Deploy Check # Djangoの本番設定チェック
      env:
        DJANGO_SETTINGS_MODULE: mysite.settings.prod
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      run: |
        python manage.py check --deploy

    - name: Set up Node.js # Node.js環境をセットアップ (JSテスト用)
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Node.js dependencies # Node.jsの依存ライブラリをインストール
      run: npm ci # package-lock.jsonに基づきクリーンインストール

    - name: Run npm audit # Node.jsの脆弱性監査を実行
      run: npm audit

    - name: Run JavaScript tests # JavaScriptのテストを実行
      run: |
        npm run format # まずフォーマットを適用
        npm run lint # その後Lintチェック
        npm run format -- --check # フォーマットが正しく適用されたか最終チェック

    - name: Lint and Security Check (Python) # PythonのLintとセキュリティチェック
      run: |
        black . --check
        flake8 .
        bandit -c .bandit -r .

    - name: Lint and Format Check (JavaScript) # JavaScriptのLintとフォーマットチェック
      run: |
        npm run format
        npm run lint
        npm run format -- --check # --check で変更せずにチェックのみ行う

    - name: Log in to GitHub Container Registry # GHCRへのログイン
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }} # ワークフローを実行したユーザー名
        password: ${{ secrets.GHCR_PAT }} # GHCR_PATを使用！

    - name: Build and push Docker image # Dockerイメージのビルドとプッシュ
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:latest # 小文字に変換したリポジトリ名を使用

    - name: Deploy to Render # Renderへのデプロイをトリガー
      env:
        RENDER_SERVICE_ID: srv-d2b9l895pdvs73ci8550 # あなたのRenderサービスID
      run: |
        curl -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
             -H "Content-Type: application/json" \
             "https://api.render.com/deploy/srv-${{ env.RENDER_SERVICE_ID }}?image=ghcr.io/${{ github.repository }}:latest"
